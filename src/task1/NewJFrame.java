/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package task1;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import javax.crypto.Cipher;
import javax.crypto.CipherOutputStream;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Mohamed
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }
    String ext;
    boolean flag1 = false, flag2 = false;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Attach = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        Save = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        Enc = new javax.swing.JButton();
        Decrypt = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Developed by M.Ghoraba");

        Attach.setText("Choose");
        Attach.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AttachActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        Save.setText("choose");
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);

        Enc.setText("Encrypt");
        Enc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncActionPerformed(evt);
            }
        });

        Decrypt.setText("Decrypt");
        Decrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptActionPerformed(evt);
            }
        });

        jLabel1.setText("Choose File:");

        jLabel2.setText("Choose directory to save file:");

        jLabel3.setText("Size:");

        jLabel5.setText("KB");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(42, 42, 42)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel5))
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(Enc)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 170, Short.MAX_VALUE)
                        .addComponent(Decrypt)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(Save, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Attach, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Attach))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Save))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Enc)
                    .addComponent(Decrypt))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("Application to Encrypt files ");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * This method get file as parameter and return the extension for file
     *
     * @param file
     * @return String
     */
    private static String getFileExtension(File file) {
        String fileName = file.getName();
        if (fileName.lastIndexOf(".") != -1 && fileName.lastIndexOf(".") != 0) {
            return fileName.substring(fileName.lastIndexOf("."));
        } else {
            return "";
        }
    }

    /**
     * This method execute when action performed on attach button. The action is
     * open dialog to choose file that need to encrypt it and set path in text
     * field.
     *
     * @param evt
     */
    private void AttachActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AttachActionPerformed
        JFileChooser choose = new JFileChooser();
        int value = choose.showOpenDialog(null);
        if (value == JFileChooser.APPROVE_OPTION) {
            File file = choose.getSelectedFile();
            ext = getFileExtension(file);
            jLabel4.setText(String.valueOf(file.length() / 1024));
            jTextField1.setText(file.getPath());
            flag1 = true;
        } else {
            JOptionPane.showMessageDialog(null, "You Cancelled");
        }
    }//GEN-LAST:event_AttachActionPerformed
    /**
     *
     * This method execute when action performed on save button. The action is
     * open dialog to choose path to save encrypted file and give name to it and
     * set path in text field.
     *
     * @param evt
     */
    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        JFileChooser choose = new JFileChooser();
        int value = choose.showSaveDialog(null);
        if (value == JFileChooser.APPROVE_OPTION) {
            File file = choose.getSelectedFile();
            jTextField2.setText(file.getPath() + ext);
            flag2 = true;
        } else {
            JOptionPane.showMessageDialog(null, "You Cancelled");
        }
    }//GEN-LAST:event_SaveActionPerformed
    /**
     *
     * This method execute when action performed on encrypt button. The action
     * is encrypt file using cipher library
     *
     * @param evt
     */
    private void EncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncActionPerformed
        try {
            if (!(jTextField1.getText().isEmpty())) {
                if (!(jTextField2.getText().isEmpty())) {
                    if (flag1 && flag2) {
                        FileInputStream in = new FileInputStream(jTextField1.getText());
                        FileOutputStream out = new FileOutputStream(jTextField2.getText());
                        SecretKeySpec key = new SecretKeySpec("aesEncryptionKeyMohamed Ghoraba4".getBytes("UTF-8"), "AES");
                        IvParameterSpec cbc = new IvParameterSpec("Mohamed Ghoraba4".getBytes("UTF-8"));
                        Cipher Encrypt = Cipher.getInstance("AES/CBC/PKCS5Padding");
                        Encrypt.init(Cipher.ENCRYPT_MODE, key, cbc);
                        CipherOutputStream cout = new CipherOutputStream(out, Encrypt);
                        byte[] buff = new byte[1024];
                        int read;
                        while ((read = in.read(buff)) != -1) {
                            cout.write(buff, 0, read);
                        }
                        in.close();
                        out.flush();
                        cout.close();
                        JOptionPane.showMessageDialog(null, "The file was Encrypted Successfully");
                        flag1 = false;
                        flag2 = false;
                    } else {
                        JOptionPane.showMessageDialog(null, "choose file not encrypted");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "choose location for save file");
                }
            } else {
                JOptionPane.showMessageDialog(null, "choose file");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }

    }//GEN-LAST:event_EncActionPerformed
    /**
     * **************************************************************************
     * This method execute when action performed on decrypt button. The action
     * is decrypt file using cipher library
     *
     * @param evt
     */
    private void DecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptActionPerformed
        try {
            if (!(jTextField1.getText().isEmpty())) {
                if (!(jTextField2.getText().isEmpty())) {
                    if (flag1 && flag2) {
                        FileInputStream in = new FileInputStream(jTextField1.getText());
                        FileOutputStream out = new FileOutputStream(jTextField2.getText());
                        SecretKeySpec key = new SecretKeySpec("aesEncryptionKeyMohamed Ghoraba4".getBytes("UTF-8"), "AES");
                        IvParameterSpec cbc = new IvParameterSpec("Mohamed Ghoraba4".getBytes("UTF-8"));
                        Cipher Encrypt = Cipher.getInstance("AES/CBC/PKCS5Padding");
                        Encrypt.init(Cipher.DECRYPT_MODE, key, cbc);
                        CipherOutputStream cout = new CipherOutputStream(out, Encrypt);
                        byte[] buff = new byte[1024];
                        int read;
                        while ((read = in.read(buff)) != -1) {
                            cout.write(buff, 0, read);
                        }
                        in.close();
                        out.flush();
                        cout.close();
                        flag1 = false;
                        flag2 = false;
                        JOptionPane.showMessageDialog(null, "The file was Decrypted Successfully");
                    } else {
                        JOptionPane.showMessageDialog(null, "choose Encrypted file");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "choose location for save file");
                }
            } else {
                JOptionPane.showMessageDialog(null, "choose file");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_DecryptActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Attach;
    private javax.swing.JButton Decrypt;
    private javax.swing.JButton Enc;
    private javax.swing.JButton Save;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
